{"version":3,"file":"definitions.js","sourceRoot":"","sources":["../../src/definitions.ts"],"names":[],"mappings":"","sourcesContent":["export interface GenericOAuth2Plugin {\n  /**\n   * Authenticate against a OAuth 2 provider.\n   * @param {OAuth2AuthenticateOptions} options\n   * @returns {Promise<any>} the resource url response\n   */\n  authenticate(options: OAuth2AuthenticateOptions): Promise<any>;\n  /**\n   * Listens for OAuth implicit redirect flow queryString CODE to generate an access_token\n   * @param {OAuth2RedirectAuthenticationOptions} options\n   * @returns {Promise<any>} the token endpoint response\n   */\n  redirectFlowCodeListener(\n    options: ImplicitFlowRedirectOptions,\n  ): Promise<any>;\n  /**\n   * Get a new access token based on the given refresh token.\n   * @param {OAuth2RefreshTokenOptions} options\n   * @returns {Promise<any>} the token endpoint response\n   */\n  refreshToken(options: OAuth2RefreshTokenOptions): Promise<any>;\n  /**\n   * Logout from the authenticated OAuth 2 provider\n   * @param {OAuth2AuthenticateOptions} options Although not all options are needed. We simply reuse the options from authenticate\n   * @param {String} id_token Optional idToken, only for Android\n   * @returns {Promise<boolean>} true if the logout was successful else false.\n   */\n  logout(\n    options: OAuth2AuthenticateOptions,\n    id_token?: string,\n  ): Promise<boolean>;\n}\n\nexport interface ImplicitFlowRedirectOptions extends OAuth2AuthenticateOptions {\n  /**\n   * The URL where we get the code\n   */\n  response_url: string;\n}\n\nexport interface OAuth2RefreshTokenOptions {\n  /**\n   * The app id (client id) you get from the oauth provider like Google, Facebook,...\n   */\n  appId: string;\n  /**\n   * Url for retrieving the access_token.\n   */\n  accessTokenEndpoint: string;\n  /**\n   * The refresh token that will be used to obtain the new access token.\n   */\n  refreshToken: string;\n  /**\n   * A space-delimited list of permissions that identify the resources that your application could access on the user's behalf.\n   */\n  scope?: string;\n}\n\nexport interface OAuth2AuthenticateBaseOptions {\n  /**\n   * The app id (client id) you get from the oauth provider like Google, Facebook,...\n   *\n   * required!\n   */\n  appId?: string;\n  /**\n   * The base url for retrieving tokens depending on the response type from a OAuth 2 provider. e.g. https://accounts.google.com/o/oauth2/auth\n   *\n   * required!\n   */\n  authorizationBaseUrl?: string;\n  /**\n   * Tells the authorization server which grant to execute. Be aware that a full code flow is not supported as clientCredentials are not included in requests.\n   *\n   * But you can retrieve the authorizationCode if you don't set a accessTokenEndpoint.\n   *\n   * required!\n   */\n  responseType?: string;\n  /**\n   * Url to  which the oauth provider redirects after authentication.\n   *\n   * required!\n   */\n  redirectUrl?: string;\n  /**\n   * Url for retrieving the access_token by the authorization code flow.\n   */\n  accessTokenEndpoint?: string;\n  /**\n   * Protected resource url. For authentication you only need the basic user details.\n   */\n  resourceUrl?: string;\n  /**\n   * Enable PKCE if you need it.\n   */\n  pkceEnabled?: boolean;\n  /**\n   * A space-delimited list of permissions that identify the resources that your application could access on the user's behalf.\n   * If you want to get a refresh token, you most likely will need the offline_access scope (only supported in Code Flow!)\n   */\n  scope?: string;\n  /**\n   * A unique alpha numeric string used to prevent CSRF. If not set the plugin automatically generate a string\n   * and sends it as using state is recommended.\n   */\n  state?: string;\n  /**\n   * Additional parameters for the created authorization url\n   */\n  additionalParameters?: { [key: string]: string };\n  /**\n   * @since 3.0.0\n   */\n  logsEnabled?: boolean;\n  /**\n   * @since 3.1.0 ... not implemented yet!\n   */\n  logoutUrl?: string;\n\n  /**\n   * Additional headers for resource url request\n   * @since 3.0.0\n   */\n  additionalResourceHeaders?: { [key: string]: string };\n}\n\nexport interface OAuth2AuthenticateOptions\n  extends OAuth2AuthenticateBaseOptions {\n  /**\n   * Custom options for the platform \"web\"\n   */\n  web?: WebOption;\n  /**\n   * Custom options for the platform \"android\"\n   */\n  android?: AndroidOptions;\n  /**\n   * Custom options for the platform \"ios\"\n   */\n  ios?: IosOptions;\n}\n\nexport interface WebOption extends OAuth2AuthenticateBaseOptions {\n  /**\n   * Options for the window the plugin open for authentication. e.g. width=500,height=600,left=0,top=0\n   */\n  windowOptions?: string;\n  /**\n   * Options for the window target. Defaults to _blank\n   */\n  windowTarget?: string;\n  /**\n   * Whether to send the cache control header with the token request, unsupported by some providers. Defaults to true.\n   */\n  sendCacheControlHeader?: boolean;\n}\n\nexport interface AndroidOptions extends OAuth2AuthenticateBaseOptions {\n  /**\n   * Some oauth provider especially Facebook forces us to use their SDK for apps.\n   *\n   * Provide a class name implementing the 'CapacitorCommunityGenericOAuth2.OAuth2CustomHandler' protocol.\n   */\n  customHandlerClass?: string;\n  /**\n   * Alternative to handle the activity result. The `onNewIntent` method is only call if the App was killed while logging in.\n   */\n  handleResultOnNewIntent?: boolean;\n  /**\n   * Default handling the activity result.\n   */\n  handleResultOnActivityResult?: boolean;\n}\n\nexport interface IosOptions extends OAuth2AuthenticateBaseOptions {\n  /**\n   * If true the iOS 13+ feature Sign in with Apple (SiWA) try to build the scope from the standard \"scope\" parameter.\n   *\n   * If false scope is set to email and fullName.\n   */\n  siwaUseScope?: boolean;\n  /**\n   * Some oauth provider especially Facebook forces us to use their SDK for apps.\n   *\n   * Provide a class name implementing the 'CapacitorCommunityGenericOAuth2.OAuth2CustomHandler' protocol.\n   */\n  customHandlerClass?: string;\n}\n"]}